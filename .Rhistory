#init row span max
idcol<-1
for(j in colnames(w)){
#attributi cella
attrib<-w[j][[1]]
rspan<-as.integer(attrib["rowSpan"])
cspan<-as.integer(attrib["colSpan"])
if(ris[[idrow]][idcol]!=""){
idcol<-idcol+1
}
for(ktmp in 1:rspan){
for(stmp in 1:cspan){
ris[[ktmp+idrow-1]][stmp+idcol-1]<-"#"
}
}
val<-as.character(attrib["innerhtml"])
print(c(idrow,idcol,val))
risitem[[idrow]][idcol]<-val
idcol<-idcol+cspan
}
ris<-list()
for(i in 1:nrow)
ris<-c(ris,list(replicate(ncol,"")))
idrow<-1
attrib
ris<-list()
for(i in 1:nrow)
ris<-c(ris,list(replicate(ncol,"")))
idrow<-1
for(i in colnames(ref)){
#lista di liste con attributi celle
attribs<-ref[i][[1]]
# col<-ref[i][[1]]
# ncolcur<-length(col)
#init row span max
idcol<-1
for(j in colnames(w)){
#attributi cella
attrib<-w[j][[1]]
rspan<-as.integer(attrib["rowSpan"])
cspan<-as.integer(attrib["colSpan"])
if(ris[[idrow]][idcol]!=""){
idcol<-idcol+1
}
for(ktmp in 1:rspan){
for(stmp in 1:cspan){
ris[[ktmp+idrow-1]][stmp+idcol-1]<-"#"
}
}
val<-as.character(attrib["innerhtml"])
print(c(idrow,idcol,val))
risitem[[idrow]][idcol]<-val
idcol<-idcol+cspan
}
}
ris
for(i in colnames(ref)){
#lista di liste con attributi celle
attribs<-ref[i][[1]]
# col<-ref[i][[1]]
# ncolcur<-length(col)
#init row span max
idcol<-1
for(j in colnames(w)){
#attributi cella
attrib<-attribs[j][[1]]
rspan<-as.integer(attrib["rowSpan"])
cspan<-as.integer(attrib["colSpan"])
if(ris[[idrow]][idcol]!=""){
idcol<-idcol+1
}
for(ktmp in 1:rspan){
for(stmp in 1:cspan){
ris[[ktmp+idrow-1]][stmp+idcol-1]<-"#"
}
}
val<-as.character(attrib["innerhtml"])
print(c(idrow,idcol,val))
risitem[[idrow]][idcol]<-val
idcol<-idcol+cspan
}
idrow<-idrow+1
}
ris
ris<-list()
for(i in 1:nrow)
ris<-c(ris,list(replicate(ncol,"")))
idrow<-1
for(i in colnames(ref)){
#lista di liste con attributi celle
attribs<-ref[i][[1]]
# col<-ref[i][[1]]
# ncolcur<-length(col)
#init row span max
idcol<-1
for(j in colnames(w)){
#attributi cella
attrib<-attribs[j][[1]]
rspan<-as.integer(attrib["rowSpan"])
cspan<-as.integer(attrib["colSpan"])
if(ris[[idrow]][idcol]!=""){
idcol<-idcol+1
}
for(ktmp in 1:rspan){
for(stmp in 1:cspan){
ris[[ktmp+idrow-1]][stmp+idcol-1]<-"#"
}
}
val<-as.character(attrib["innerhtml"])
print(c(idrow,idcol,val))
risitem[[idrow]][idcol]<-val
idcol<-idcol+cspan
}
idrow<-idrow+1
}
#
# # creao una lista con le righe della tabella
# a0<-str_split(aa,"<tr>")
# #la prima riga Ã¨ table
# a0_1<-a0[[1]][1]
# # le rimenti sono le righe della tabella
# len<-length(a0[[1]])
# a1<-a0[[1]][2:len]
# #ho fatto il parsing per <tr>, cancella la chiura del tag
# a1_1<-str_replace_all(a1,"</tr>"," ")
# a1_2<-str_replace_all(a1_1,"\"\"","\"")
# #effettuamo lo spit rispetto al tag <th>
# a2<-str_split(a1_2,"^(<th).(>)$")
#examples
#
# a2<-str_split(a1_1,"<[^>]*>") ## prima soluzione ma i tag di chiusura creano spazi vuoti inesistenti
ris
ris<-list()
for(i in 1:nrow)
ris<-c(ris,list(replicate(ncol,"")))
idrow<-1
for(i in colnames(ref)){
#lista di liste con attributi celle
attribs<-ref[i][[1]]
# col<-ref[i][[1]]
# ncolcur<-length(col)
#init row span max
idcol<-1
for(j in colnames(w)){
#attributi cella
attrib<-attribs[j][[1]]
rspan<-as.integer(attrib["rowSpan"])
cspan<-as.integer(attrib["colSpan"])
if(ris[[idrow]][idcol]!=""){
idcol<-idcol+1
}
for(ktmp in 1:rspan){
for(stmp in 1:cspan){
ris[[ktmp+idrow-1]][stmp+idcol-1]<-"#"
}
}
val<-as.character(attrib["innerhtml"])
ris[[idrow]][idcol]<-val
idcol<-idcol+cspan
}
idrow<-idrow+1
}
ris<-list()
for(i in 1:nrow)
ris<-c(ris,list(replicate(ncol,"")))
idrow<-1
ris<-list()
for(i in 1:nrow)
ris<-c(ris,list(replicate(ncol,"")))
idrow<-1
for(i in colnames(ref)){
#lista di liste con attributi celle
#i<-"row1"
attribs<-ref[i][[1]]
# col<-ref[i][[1]]
# ncolcur<-length(col)
#init row span max
idcol<-1
for(j in colnames(attribs)){
#attributi cella
attrib<-attribs[j][[1]]
rspan<-as.integer(attrib["rowSpan"])
cspan<-as.integer(attrib["colSpan"])
if(ris[[idrow]][idcol]!=""){
idcol<-idcol+1
}
for(ktmp in 1:rspan){
for(stmp in 1:cspan){
ris[[ktmp+idrow-1]][stmp+idcol-1]<-"#"
}
}
val<-as.character(attrib["innerhtml"])
ris[[idrow]][idcol]<-val
idcol<-idcol+cspan
}
idrow<-idrow+1
}
ris
ris<-list()
for(i in 1:nrow)
ris<-c(ris,list(replicate(ncol,"")))
idrow<-1
for(i in colnames(ref)){
#lista di liste con attributi celle
#i<-"row1"
attribs<-ref[i][[1]]
# col<-ref[i][[1]]
# ncolcur<-length(col)
#init row span max
idcol<-1
for(j in colnames(attribs)){
#attributi cella
attrib<-attribs[j][[1]]
rspan<-as.integer(attrib["rowSpan"])
cspan<-as.integer(attrib["colSpan"])
while(ris[[idrow]][idcol]!=""){
idcol<-idcol+1
}
for(ktmp in 1:rspan){
for(stmp in 1:cspan){
ris[[ktmp+idrow-1]][stmp+idcol-1]<-"#"
}
}
val<-as.character(attrib["innerhtml"])
ris[[idrow]][idcol]<-val
idcol<-idcol+cspan
}
idrow<-idrow+1
}
ris
numvarrows<-2
numvarcols<-2
misura<-'mpg'
aggr<-'Sum'
vals<-paste(aggr,"(",misura,")")
aa<-readr::read_lines('data.json')
data<-jsonlite::fromJSON(aa)
ref<-data$data
nrow<-length(ref)
ncol<-0
w<-ref["row1"][[1]]
for(j in colnames(w)){
ncol<-ncol+unlist(ref["row1"][[1]][j][[1]]["colSpan"])
}
#names(bus)<-colnames(ref)
ris<-list()
for(i in 1:nrow)
ris<-c(ris,list(replicate(ncol,"")))
idrow<-1
for(i in colnames(ref)){
#lista di liste con attributi celle
#i<-"row1"
attribs<-ref[i][[1]]
# col<-ref[i][[1]]
# ncolcur<-length(col)
#init row span max
idcol<-1
for(j in colnames(attribs)){
#attributi cella
attrib<-attribs[j][[1]]
rspan<-as.integer(attrib["rowSpan"])
cspan<-as.integer(attrib["colSpan"])
while(ris[[idrow]][idcol]!=""){
idcol<-idcol+1
}
for(ktmp in 1:rspan){
for(stmp in 1:cspan){
ris[[ktmp+idrow-1]][stmp+idcol-1]<-"#"
}
}
val<-as.character(attrib["innerhtml"])
ris[[idrow]][idcol]<-val
idcol<-idcol+cspan
}
idrow<-idrow+1
}
ris
misura<-'mpg'
aggr<-'Sum'
vals<-paste(aggr,"(",misura,")")
aa<-readr::read_lines('data.json')
data<-jsonlite::fromJSON(aa)
ref<-data$data
nrow<-length(ref)
# compute numero of col
ncol<-0
w<-ref["row1"][[1]]
for(j in colnames(w)){
ncol<-ncol+unlist(ref["row1"][[1]][j][[1]]["colSpan"])
}
#names(bus)<-colnames(ref)
ris<-list()
for(i in 1:nrow)
ris<-c(ris,list(replicate(ncol,"")))
idrow<-1
for(i in colnames(ref)){
#lista di liste con attributi celle
#i<-"row1"
attribs<-ref[i][[1]]
# col<-ref[i][[1]]
# ncolcur<-length(col)
#init row span max
idcol<-1
for(j in colnames(attribs)){
#attributi cella
attrib<-attribs[j][[1]]
rspan<-as.integer(attrib["rowSpan"])
cspan<-as.integer(attrib["colSpan"])
while(ris[[idrow]][idcol]!=""){
idcol<-idcol+1
}
for(ktmp in 1:rspan){
for(stmp in 1:cspan){
ris[[ktmp+idrow-1]][stmp+idcol-1]<-"#"
}
}
val<-as.character(attrib["innerhtml"])
ris[[idrow]][idcol]<-val
idcol<-idcol+cspan
}
idrow<-idrow+1
}
ris
misura<-'mpg'
aggr<-'Sum'
vals<-paste2(aggr,"(",misura,")")
vals<-paste0(aggr,"(",misura,")")
as.data.frame(ris)
sss<-as.data.frame(ris)
View(sss)
sss<-as.data.frame.character(ris)
sss<-as.data.frame(r1,colnames(letter(1:8)))
sss<-as.data.frame(ris,colnames(letter(1:8)))
sss<-as.data.frame(ris,colnames(lettera(1:8)))
sss<-as.data.frame(ris,colnames(letters(1:8)))
sss<-as.data.frame(ris,colnames(letters(1:8)))
letters
sss<-as.data.frame(ris,colnames(letters[1:8]))
sss
View(sss)
View(sss)
ris
#createcsv<-function(misura,aggr,)
misura<-'mpg'
aggr<-'Sum'
intest<-paste0(aggr,"(",misura,")")
aa<-readr::read_lines('data.json')
data<-jsonlite::fromJSON(aa)
ref<-data$data
nrow<-length(ref)
# compute numero of col
ncol<-0
w<-ref["row1"][[1]]
for(j in colnames(w)){
ncol<-ncol+unlist(ref["row1"][[1]][j][[1]]["colSpan"])
}
#names(bus)<-colnames(ref)
ris<-list()
for(i in 1:nrow)
ris<-c(ris,list(replicate(ncol,"")))
idrow<-1
for(i in colnames(ref)){
#lista di liste con attributi celle
#i<-"row1"
attribs<-ref[i][[1]]
# col<-ref[i][[1]]
# ncolcur<-length(col)
#init row span max
idcol<-1
for(j in colnames(attribs)){
#attributi cella
attrib<-attribs[j][[1]]
rspan<-as.integer(attrib["rowSpan"])
cspan<-as.integer(attrib["colSpan"])
while(ris[[idrow]][idcol]!=""){
idcol<-idcol+1
}
for(ktmp in 1:rspan){
for(stmp in 1:cspan){
ris[[ktmp+idrow-1]][stmp+idcol-1]<-"#"
}
}
val<-as.character(attrib["innerhtml"])
ris[[idrow]][idcol]<-val
idcol<-idcol+cspan
}
idrow<-idrow+1
}
ris[[1]][1]<-intest
ris
sss<-as.data.frame(ris,colnames())
letters[1:8]
sss<-as.data.frame(ris,col.names(letters[1:8]))
www<-names(ris)
www
csvsource<-data.frame()
csvsource<-as.data.frame(ris,row.names=FALSE)
as.data.frame
csvsource<-as.data.frame(ris,optional = TRUE)
write.csv2(csvsource,file='pivot.csv')
csvsource<-as.data.frame(ris,optional = TRUE,fix.empty.names = TRUE)
www<-names(ris)
csvsource<-as.data.frame(ris,optional = TRUE,fix.empty.names = TRUE)
write.csv2(csvsource,file='pivot.csv')
csvsource<-as.data.frame(ris,optional = TRUE,fix.empty.names = TRUE)
write.csv2(csvsource,file='pivot.csv',quote=FALSE,row.name=FALSE)
csvsource<-as.data.frame(ris,optional = TRUE,fix.empty.names = TRUE)
write.csv2(csvsource,file='pivot.csv',quote=FALSE,row.name=FALSE,col.names=TRUE)
write.csv2(csvsource,file='pivot.csv',quote=FALSE)
write.csv2(csvsource,file='pivot.csv',quote=FALSE)
csvsource<-as.data.frame(as.character(ris),optional = TRUE,fix.empty.names = TRUE)
csvsource<-as.data.frame(ris,optional = TRUE,fix.empty.names = TRUE)
csvsource<-as.data.frame(ris)#optional = TRUE,fix.empty.names = TRUE)
write.csv2(csvsource,file='pivot.csv',quote=FALSE,sep=";")
write.csv2(csvsource,file='pivot.csv',quote=FALSE)
csvsource<-as.data.frame(ris,colnames(c(letters[1:ncol]))#optional = TRUE,fix.empty.names = TRUE)
)
csvsource<-as.data.frame(ris)#optional = TRUE,fix.empty.names = TRUE)
)
csvsource<-as.data.frame(ris,colnames(c(letters[1:ncol])))#optional = TRUE,fix.empty.names = TRUE)
View(csvsource)
csvsource<-as.data.frame(ris,col.names(c(letters[1:ncol])))#optional = TRUE,fix.empty.names = TRUE)
letters[1:ncol]
c(letters[1:ncol])
col.names(letters[1:ncol])
csvsource<-as.data.frame(ris,col.names=names(letters[1:ncol]))#optional = TRUE,fix.empty.names = TRUE)
View(csvsource)
ris
ris[[1]][1]<-intest
csvsource<-as.data.frame(ris,col.names=names(letters[1:ncol]))#optional = TRUE,fix.empty.names = TRUE)
csvsource
csvsource<-as.data.frame(ris,row.names=names(letters[1:ncol]))#optional = TRUE,fix.empty.names = TRUE)
csvsource
csvsource<-as.data.frame(ris,row.names=letters[1:ncol])#optional = TRUE,fix.empty.names = TRUE)
csvsource
csvsource<-as.data.frame(ris,col.names=letters[1:ncol])#optional = TRUE,fix.empty.names = TRUE)
ris
ris[[1]][1]<-intest
csvsource<-as.data.frame(ris,col.names=letters[1:ncol])#optional = TRUE,fix.empty.names = TRUE)
csvsource
write.csv2(csvsource,file='pivot.csv',quote=FALSE)
readr::write_csv(csvsource,file='pivot.csv',quote=FALSE)
readr::write_csv(csvsource,file='pivot.csv')
readr::write_csv(csvsource,path='pivot.csv')
readr::write_csv(csvsource,path='pivot.csv'col_names=FALSE)
readr::write_csv(csvsource,path='pivot.csv',col_names=FALSE)
readr::write_execl_csv(csvsource,path='pivot.csv',col_names=FALSE)
readr::write_excel_csv(csvsource,path='pivot.csv',col_names=FALSE)
readr::write_csv2(csvsource,path='pivot.csv',col_names=FALSE)
readr::write_delim(csvsource,path='pivot.csv',delim=";",col_names=FALSE)
readr::write_delim(stringr::str_replace(csvsource,"#",""),path='pivot.csv',delim=";",col_names=FALSE)
stringr::str_replace(csvsource,"#",""
readr::write_csv2(csvsource,path='pivot.csv',col_names=FALSE)
stringr::str_replace(csvsource,"#",""
)
ris
risa<-stringr::str_replace(ris,"#","")
risa<-lapply(stringr::str_replace(ris,"#",""))
risa<-lapply(ris,function(x){stringr::str_replace(x,"#","")})
csvsource<-as.data.frame(risa,col.names=letters[1:ncol])#optional = TRUE,fix.empty.names = TRUE)
readr::write_delim(csvsource,path='pivot.csv',delim=";",col_names=FALSE)
ris
risa<-lapply(ris,function(x){stringr::str_replace(x,"#","")})
risa
csvsource<-as.data.frame(risa,col.names=letters[1:ncol])#optional = TRUE,fix.empty.names = TRUE)
View(csvsource)
csvsource<-as.data.frame(t(risa),col.names=letters[1:ncol])#optional = TRUE,fix.empty.names = TRUE)
csvsource
View(csvsource)
readr::write_delim(csvsource,path='pivot.csv',delim=";",col_names=FALSE)
csvsource<-as.data.frame(risa,col.names=letters[1:ncol])#optional = TRUE,fix.empty.names = TRUE)
View(csvsource)
readr::write_delim(t(csvsource),path='pivot.csv',delim=";",col_names=FALSE)
View(csvsource)
View(risa)
View(ris)
readr::write_delim(ris,path='pivot.csv',delim=";",col_names=FALSE)
readr::write_delim(risa,path='pivot.csv',delim=";",col_names=FALSE)
csvsource<-data.frame()
for (j in ris)
print(j)
for (j in ris)
csvsourcea<-rbind(j)
View(csvsourcea)
for (j in ris)
csvsourcea<-rbind(csvsource,j)
View(csvsourcea)
csvsource<-data.frame(col.names=letters[1:ncol])
View(csvsource)
csvsource<-data.frame()
csvsourcea<-rbind(csvsourcea,ris[[1]])
csvsourcea<-rbind(csvsourcea,ris[1])
csvsourcea<-rbind(csvsourcea,as.character(ris[1]))
ris[1]
unlist(ris[1])
csvsourcea<-rbind(csvsourcea,unlist(ris[1]))
shiny::runApp()
runApp()
mm
s.data.frame(mm,ncol=ncol,byrow=TRUE)
as.data.frame(mm,ncol=ncol,byrow=TRUE)
as.data.frame(mm,ncol=8,byrow=TRUE)
runApp()
as.data.frame(mm,ncol=8,byrow=TRUE)
as.data.frame(matrix(mm,8,ncol=8,byrow=TRUE))
as.data.frame(matrix(mm,8,ncol=8,byrow=TRUE),optional=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
